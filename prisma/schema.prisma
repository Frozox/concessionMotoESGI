// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String           @id @default(uuid())
  email                    String           @unique
  firstName                String
  lastName                 String
  password                 String
  online                   Boolean          @default(false)
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @default(now()) @updatedAt
  roles                    Role[]
  bikes                    Bike[]
  ownerOnChannels          Channel[]        @relation("OwnerOnChannels")
  memberOnChannels         Channel[]
  authorOnDirectMessages   DirectMessage[]  @relation("AuthorOnDirectMessages")
  receiverOnDirectMessages DirectMessage[]  @relation("ReceiverOnDirectMessages")
  channelMessages          ChannelMessage[]
  adminRequests            adminRequest[]
  approvedRequests         adminRequest[]   @relation("RequestApprover")
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User[]
}

model Bike {
  id        String   @id @default(uuid())
  year      Int
  model     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User[]
}

model Channel {
  id        String           @id @default(uuid())
  owner     User             @relation(name: "OwnerOnChannels", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  title     String
  capacity  Int
  open      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  members   User[]
  messages  ChannelMessage[]
}

model ChannelMessage {
  id        String   @id @default(uuid())
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model DirectMessage {
  id         String   @id @default(uuid())
  author     User     @relation(name: "AuthorOnDirectMessages", fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  receiver   User     @relation(name: "ReceiverOnDirectMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Faq {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BotStep {
  id              String           @id @default(uuid())
  question        String
  answers         BotAnswer[]
  isRoot          Boolean          @default(false)
  nextStepAnswers BotAnswer[]      @relation("NextBotStep")
  BotUserMessages BotUserMessage[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
}

model BotAnswer {
  id         String   @id @default(uuid())
  answer     String
  step       BotStep  @relation(fields: [stepId], references: [id])
  stepId     String
  nextStep   BotStep? @relation(name: "NextBotStep", fields: [nextStepId], references: [id], onDelete: Cascade)
  nextStepId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model BotUserMessage {
  id        String   @id @default(uuid())
  step      BotStep  @relation(fields: [stepId], references: [id])
  stepId    String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model adminRequest {
  id                String   @id @default(uuid())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  requestApprover   User?    @relation(name: "RequestApprover", fields: [requestApproverId], references: [id])
  requestApproverId String?
  status            String   @default("pending")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
}
