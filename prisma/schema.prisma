// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  email           String          @unique
  firstName       String
  lastName        String
  online          Boolean         @default(false)
  roles           String[]        @default(["USER"])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  MemberOnChannel ChannelMember[]
  Bikes           Bike[]
}

model Bike {
  id     Int    @id @default(autoincrement())
  year   Int
  model  String
  User   User?  @relation(fields: [userId], references: [id])
  userId Int?
}

model Channel {
  id             Int              @id @default(autoincrement())
  owner          User              @relation(fields: [ownerId], references: [id])
  ownerId        Int
  title          String
  capacity       Int
  status         String
  members        ChannelMember[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ChannelMessage ChannelMessage[]
}

model ChannelMember {
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  channel        Channel          @relation(fields: [channelId], references: [id])
  channelId      Int
  ChannelMessage ChannelMessage[]

  @@id([userId, channelId])
}

model ChannelMessage {
  id        Int           @id @default(autoincrement())
  channel   Channel       @relation(fields: [channelId], references: [id])
  channelId Int
  author    ChannelMember @relation(fields: [authorId], references: [userId])
  authorId  Int
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// model PrivateMessage {
//   id         Int      @id @default(autoincrement())
//   author     User     @relation(fields: [authorId], references: [id])
//   authorId   Int
//   recipient  User     @relation(fields: [receiverId], references: [id])
//   receiverId Int
//   content    String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }
